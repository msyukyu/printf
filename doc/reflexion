positifs : base 1 milliard de milliards

decalage *2 : on decale tous les bits de 1 sur la gauche
tous les blocs qui depassent 1 milliard : on divise par 1 milliard et on
reporte 1 sur le bloc de gauche

conversion bits a virgule :

on commence par le bit le plus a gauche : 
	il s'agit du nombre 5
	on ajoute au premier bloc 5 * 100 millions de milliards
	on decale de un bit a droite
	on multiplie 5 par 2
	on ajoute au premier bloc 25 * 10 millions de milliards
	ainsi de suite jusqu'a la multiplication par 1
	
		on est certain qu'on ne va jamais depasser le milliard car
		la serie (1/2)^n tel que n va de 1 a l'infini est convergente vers 1

	lorsqu'on devrait multiplier par 1/10 : on le fait, mais on recupere le
	reste qu'on ajoute au bloc suivant multiplie par 100 millions de milliards
	et ainsi de suite, jusqu'a ce que la division vale 0

	des lors qu'on est passe au bloc suivant, celui-ci utilise le meme principe
	a partir du reste de la division
	->il faut gerer le fait qu'a partir du bloc 2, la valeur peut re-deborder
	sur le bloc 1 (simple addition)


data type : doit contenir au moins 5 fois la base (p : ex 1 milliard de
milliards) -> choix du type : unsigned long long : base : 1 milliard de
milliards soit 1 000 000 000 000 000 000 -> avantage : peut meme contenir 10
fois la base, ce qui permettra plus de flexibilite en cas de reutilisation de
la structure pour des traitements autres que la conversion de long double

la plupart des systemes donneront 128 bits a cette structure, ce qui est un
grand gachi puisqu'on en utilise que 64, mais c'est le prix a payer pour la
compatibilite et le respect de la norme C (unsigned long long est garanti au
moins 64 bits)


-> convertir double en long double pour ne gerer qu'un cas de figure ?
(le format d'encodage suit une logique differente, mais aucune perte de
precision avec ce cast)

///////////////

nouvelle reflexion:

Recursion sur les maillons de la chaine

Arret de la recursion lorsque current == i_e -> on rentre dans le if de fin qui
appelle une fonction specialisee qui va gérer le dernier bloc et malloc
	-> d’office la partie entiere

A chaque étape on “imprime” tous les caractères d’un bloc

Pour chaque bloc “non” specialise on s’occupe juste d’imprimer les caracteres
comme si la longueur etait la bonne, on incrément l’index, etc.

preparer le manager pour avoir la precision voulue (en enregistrant le dernier
digit avant la precision), il faut savoir combien de digits seront imprimes
a chaque etape
